import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.test.web.servlet.MockMvc;

@SpringBootTest
@AutoConfigureMockMvc
public class UserControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private AuthenticationManager authenticationManager;

    @MockBean
    private TokenService tokenService;

    @MockBean
    private UserService userService;

    @Autowired
    private ObjectMapper objectMapper;

    private UserDTO userDTO;
    private RegisterDTO registerDTO;
    private String token;

    @BeforeEach
    public void setUp() {
        userDTO = new UserDTO();
        userDTO.setLogin("user");
        userDTO.setPassword("password");

        registerDTO = new RegisterDTO();
        registerDTO.setLogin("newuser");
        registerDTO.setPassword("newpassword");
        // Preencha outros campos de registerDTO conforme necessário

        token = "mockToken";
    }

    @Test
    public void loginTest() throws Exception {
        // Configurar o comportamento esperado do serviço mock
        Authentication authentication = new UsernamePasswordAuthenticationToken(userDTO.getLogin(), userDTO.getPassword());
        when(authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(userDTO.getLogin(), userDTO.getPassword())))
                .thenReturn(authentication);
        when(tokenService.generateToken((UserEntity) authentication.getPrincipal())).thenReturn(token);

        // Realizar a chamada POST e verificar o status da resposta
        mockMvc.perform(post("/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(userDTO)))
                .andExpect(status().isOk());
    }

    @Test
    public void registerTest() throws Exception {
        // Configurar o comportamento esperado do serviço mock
        when(userService.findByLogin(registerDTO.getLogin())).thenReturn(null);

        // Realizar a chamada POST e verificar o status da resposta
        mockMvc.perform(post("/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(registerDTO)))
                .andExpect(status().isOk());
    }

    @Test
    public void registerTestUserAlreadyExists() throws Exception {
        // Configurar o comportamento esperado do serviço mock
        when(userService.findByLogin(registerDTO.getLogin())).thenReturn(new UserEntity());

        // Realizar a chamada POST e verificar o status da resposta
        mockMvc.perform(post("/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(registerDTO)))
                .andExpect(status().isBadRequest());
    }
}
